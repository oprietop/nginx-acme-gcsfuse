# HTTPS
server {
    listen 443 ssl http2;
    server_name ${DOMAIN};

    # SSL
    ssl_certificate /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    ssl_dhparam /etc/nginx/certs/dhparams.pem;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS_AES_256_GCM_SHA384:TLS-AES-256-GCM-SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS-CHACHA20-POLY1305-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA;

    # SSL Genetric
    ssl_ecdh_curve secp384r1;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_prefer_server_ciphers on;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 10s;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    # GCS Mount Example
    location ^~ /mnt {
        alias /mnt;
        autoindex on;
        auth_basic "Authorization Required";
        auth_basic_user_file /etc/nginx/htpasswd;
    }

    # Webdav Example
    location ^~ /files {
        alias /usr/share/nginx/webdav;
        dav_methods     PUT DELETE MKCOL COPY MOVE;
        create_full_put_path  on;
        dav_access group:rw all:r;
        autoindex on;
        auth_basic "Authorization Required";
        auth_basic_user_file /etc/nginx/htpasswd;
    }

    # status
    location ^~ /status {
        stub_status on;
    }

    # Grafana Proxy Pass
    location / {
        proxy_pass http://${UPSTREAM}/;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;

        # Basic auth without passing the  auth header
        auth_basic "Authorization Required";
        auth_basic_user_file /etc/nginx/htpasswd;
        proxy_set_header Authorization  "";
    }
}

## HTTP
#server {
#    listen 80;
#    server_name ${DOMAIN};
#    # HTTP Redirect from port 80 to port 443
#    return 301 https://$server_name$request_uri;
#}
